name: Composer CI

on:
  workflow_call:
    inputs:
      db_schema:
        required: true
        type: string
      db_archive_schema:
        required: false
        type: string
        default: db_archive
      php_version:
        required: true
        type: string
        default: 7.4
      php_extensions:
        type: string
        required: false
        default: gd zip mcrypt pdo_pgsql
      install_auth:
        type: boolean
        required: false
        default: false
      use_database:
        type: boolean
        required: false
        default: true
      run_migrations:
        type: boolean
        required: false
        default: true
    secrets:
      COMPOSER_AUTH_REPO:
        required: true

jobs:
  Build:
    runs-on: ubuntu-18.04
    services:
      psql:
        image: postgres:12.4-alpine
        env:
          POSTGRES_PASSWORD: testing123
          POSTGRES_DB: jenkins_test
        ports:
          - 5432
    steps:
      - uses: actions/checkout@v3.2.0

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path:  ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
              ${{ runner.os }}-composer-

      # - name: Add HTTP basic auth credentials
      #   run: echo '${{ secrets.COMPOSER_AUTH_REPO }}' > $GITHUB_WORKSPACE/auth.json

      - name: Composer Install
        uses: php-actions/composer@v6
        with:
          command: install
          php_extensions: ${{inputs.php_extensions}}
          php_version: ${{inputs.php_version}}
        env:
          CI: true
          COMPOSER_AUTH: "{ \"github-oauth\": { \"github.com\": \"${{secrets.COMPOSER_AUTH_REPO}}\" } }"

      - name: Set ENV
        run: cp .env.ci .env

      - name: Create Schema
        if: ${{inputs.use_database}}
        run: psql --host 127.0.0.1 --port ${{ job.services.psql.ports['5432'] }} -U postgres -d jenkins_test  -c "CREATE SCHEMA ${{inputs.db_schema}}; GRANT usage on schema ${{inputs.db_schema}} to postgres; grant create on schema ${{inputs.db_schema}} to postgres;"
        env:
          PGPASSWORD: testing123

      - name: Create Archive DB
        if: ${{inputs.use_database}}
        run: psql --host 127.0.0.1 --port ${{ job.services.psql.ports['5432'] }} -U postgres -d jenkins_test  -c "CREATE SCHEMA  ${{inputs.db_archive_schema}}; GRANT usage on schema  ${{inputs.db_archive_schema}} to postgres; grant create on schema ${{inputs.db_archive_schema}} to postgres;"
        env:
          PGPASSWORD: testing123

      - name: Verify Postgres connection from host
        if: ${{inputs.use_database}}
        run: psql --host 127.0.0.1 --port ${{ job.services.psql.ports['5432'] }} -U postgres  -d jenkins_test -c "SET search_path TO ${{inputs.db_schema}}"
        env:
          PGPASSWORD: testing123

      - name: Migrate
        if: ${{inputs.run_migrations}}
        uses: Cybrary/php-generic-action@main
        with:
         command: php artisan migrate --seed
         php_extensions: ${{inputs.php_extensions}}
         php_version: ${{inputs.php_version}}
        env:
          CI: true
          DB_PORT: ${{ job.services.psql.ports['5432'] }}
          DB_PASSWORD: testing123
          DB_SCHEMA: "${{inputs.db_schema}}"
          DB_CONNECTION: "pgsql"
          DB_USERNAME: postgres

      - name: Install Auth
        if: ${{inputs.install_auth}}
        uses: Cybrary/php-generic-action@main
        with:
         command: php artisan passport:install
         php_extensions: ${{inputs.php_extensions}}
         php_version: ${{inputs.php_version}}
        env:
          CI: true
          DB_PORT: ${{ job.services.psql.ports['5432'] }}
          DB_PASSWORD: testing123
          DB_SCHEMA: "${{inputs.db_schema}}"
          DB_CONNECTION: "pgsql"
          DB_USERNAME: postgres
      - name: Test
        uses: Cybrary/php-generic-action@main
        with:
         command: ./vendor/bin/phpunit
         php_extensions: ${{inputs.php_extensions}}
         php_version: ${{inputs.php_version}}
        env:
          CI: true
          DB_PORT: ${{ job.services.psql.ports['5432'] }}
          DB_PASSWORD: testing123
          DB_SCHEMA: "${{inputs.db_schema}}"
          DB_CONNECTION: "pgsql"
          DB_USERNAME: postgres
